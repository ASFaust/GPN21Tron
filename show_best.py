from Controller import Controller
from Game import Game
import numpy as np
import cv2
import pickle

def simulate_world(weights, draw=False):
    controllers = [Controller() for _ in range(len(weights))]
    game = Game(len(controllers)*2, len(controllers)*2)
    for i, controller in enumerate(controllers):
        controller.init(game, i, weights[i], 8)
    fitness_counter = np.zeros(len(controllers))

    while len(game.players) > 1:
        if draw:
            cv2.imshow("game", game.draw())
            cv2.waitKey(1)
        new_positions = []
        for i, controller in enumerate(controllers):
            if not i in game.players:
                continue
            x, y = controller.move()
            new_positions.append((i, x, y))

        for i, x, y in new_positions:  # needs to be separate loop to avoid
            # changing the board while iterating over it
            game.update_pos(i, x, y)
        game.check_dead()
        game.update_board()
        for player in game.players.keys():
            fitness_counter[player] += 1
    return fitness_counter  # returns the number of steps each player survived

if __name__ == "__main__":
    n_individuals = 25
    #min_opponents = 24
    #max_opponents = 25
    n_evals_per_individual = 20
    individual_map = {}

    for i in range(n_individuals):
        #weights = (0.8030745481505493, 0.33864959471144396, 0.49828087898209317, 0.08939906100425099, -0.14830573064071664, 1.2507451665305211)
        #weights = (0.4762431752651239, 0.9055161105264022, -0.7790163023537177, 0.522438868292459, -0.26277688152484524, 0.9017825611815647, 0.030507334178462464, -1.0529234714299636, 0.23872935382502838, 1.6878815613543514, 1.6357643986302224, 1.0209395650811672, -1.7993930940113951, -1.1304898591387582, -1.0317896095293004, 1.4263219990299327, -1.8249232499565315, -0.9961391131193531, 0.0867351187101912, 0.2057769231865904, 0.7710262560608895, 1.3748488735030038, 1.590362007817909, 1.1962761637055197, -0.09179165408429617, 0.9033307404458015, 2.381289231089082, -1.9044965405353678, 1.1831341261804804, -1.497214715068207, 0.5630384187979826, -0.9887517924306016, -0.6545665595052572, -1.1996019178468207, 0.16965089859359572, 1.2616354373758032, -1.1923367522589352, -0.27629366506613334, 0.3465633158268876, -1.3518363743251522, -1.3871800734413244, -0.22399470833085217, 1.2755993095731153, 0.12540698066023206, -0.16194092236160262, 0.07297099305704652, -1.5357152013555493, 0.08004671878517487, 0.8229493399216417, -1.1700554051219045, -0.5812319635060124, 0.16337121045368358, -2.1686197242326486, -0.35101707782220526, -0.8252730262144278, -0.8591981714394626, 0.021115610231300517, -0.13325581317373728, 1.1264078488300104, 0.7040315872173712, 0.311835863043621, -1.4008664904896597, -0.5054775922973638, 0.8817712937399499)
        #weights = (0.5257998893836906, 0.9770205654618987, 1.4618804188017074, 0.05227378409112173, 0.679748117484188, 1.0655645256742416, 0.051172263406322416, 1.209136096765177, -0.4785594875151522, -0.8670740653470038, 0.699931041288178, 0.9738819528349978, 0.7173552622358635, -1.813264705958096, -2.2033041329431957, -1.1817316762439458, 0.906265253827959, 0.26094539778340115, 0.1669210059869353, -0.7816117041973116, 0.7502670627514256, -0.6242803351552159, -0.7523292210021837, -1.2009845212770347, -0.06669480731622118, 1.085727811362009, 0.8296338861877838, 1.3794202341313102, 0.93972344647814, -0.011951969601001672, -0.8512314242535387, -1.0292587173567436, 1.6026405885848134, 1.492210986116549, -0.8792122509974744, -2.7429733640955423, -0.10644199656012793, -0.2321810132753389, 0.11779421850361867, -1.175022190154334, -0.2442137782175853, 1.1011725703525703, 2.220041985748038, -0.004573321291841531, -0.6101531230955439, -2.474569253686826, -1.2291743486173974, 1.5838449432043877, 1.0813293107100448, -1.155200260571683, -0.15764894925628672, 0.1334096001721223, -0.09280439168812933, 0.24249175995512484, -0.4115610660252932, 0.3033470226759139, 1.2567084824594124, 0.5123089422181837, -0.7562213563379904, -1.6926033583960354, 0.11451577743302227, -0.6723732261566334, -0.9284315700020299, -0.971806896796077, -2.382840912695912, -0.4678666634587228, 1.1755379800764587, 0.5173367109589426, 0.9603858695312282, -0.08371647347751045, 1.0765561102662728, -0.5204458687773336, -1.838276743846504, 2.1303920720947453, -0.8891107520509705, 0.37233248464072083, 0.9018402764809847, 0.08734111637985421, -0.27064834790159836, -1.3241158754514528, 0.8074055474445375, 0.8480330133728825, -1.756191202672694, -1.0369670445814618, -0.6196210124311914, 1.5273867302482556, -0.09476512361014565, 1.4834763508633542, 1.209900484494984, -0.5845144294453122, -0.14153491379528982, 0.5902672275140145, 0.006665733401791074, 1.154634386959521, 0.5382369715781814, 1.0018867970730037)
        weights = (3.806283226594701, 1.9292449029022165, 2.29952204709318, -1.4044391294704188, 1.1967652847278696, -2.790334100547229, 0.4053263664777349, -1.5681007947489136, -0.3258103465527848, -0.18482602530523462, 0.1275716148946428, 5.279460542336679, 0.0005051252612960189, -0.6325538503830854, 0.7190014242220394, 2.947151232615759, -3.8595546266864416, 2.5567522396581706, -0.8924548257072296, -0.4488084102075805, 0.6466724816575058, -1.5121439255290472, -2.89968762363435, -0.5537840383947638, 1.3320735978128986, -0.2432177254244846, -0.7768144773098354, -0.9315945635203757, 0.8696192895514022, -1.2304728207974105, -3.9422206831439555, -2.214376814177231, -1.3846142694858434, -1.0275345472591355, -2.777391697000814, 2.8195649637150653, -3.9265269907573312, -0.7853910125829885, 0.3859475220427273, 0.5993293143632571, -0.5483831603976362, -1.5702529867680384, -2.3627810179404567, 0.7837972227508649, 2.406214174525997, 2.234234035404621, -1.0774517992578205, -1.6347744121368668, 0.6432121090444626, 2.2194013725029476, -3.003470989091763, 3.796500026342136, 1.653833561461734, -0.6094337868309665, -2.1908324210011703, -0.2863568147615576, 1.2908628932566335, -0.09480125073458265, -1.2505943320877964, 0.21496633949664065, 0.03382767669921046, -1.524200507159733, 1.3255944939757436, 2.2143241008591237, -1.4559314221983057, 1.206484512388628, -1.234174842539294, -0.2718541936934311, 0.5448914805214579, 1.1722896077957896, 0.3855866566565668, 0.43292993348369835, 1.8336579176412713, -0.16049655458656506, -0.4236758470719572, -1.5330126118246776, 0.15454354523525984, 0.48202770515706805, 0.24060809937905844, -2.299962879106447, -0.9937649986967895, 1.9148217868448143, -0.9069977099056203, -2.562940100324295, -0.7166123638261148, -2.009302832953336, 2.502025241746472, -4.042696702951108, 1.958657008654838, -1.0754306472664055, 1.454948766833305, 0.562340621132188, -1.6758475061293305, -0.10443910973455726, -0.12887008083558407, -1.6612267701195824)
        weights =np.array(weights) +  np.random.randn() * 0.000001
        w_key = tuple(weights)
        individual_map[w_key] = {"fitness":[]}

    while True:
        #select a number of opponents
        n_opponents = 20
        opponents = list(individual_map.keys())

        #evaluate each individual against the opponents
        fitnesses = simulate_world(opponents,draw=True)
        #we need to transform the fitness into a rank.
        fitnesses = np.argsort(fitnesses)
        fitnesses = np.argsort(fitnesses).astype(np.float32) + 1
        fitnesses /= n_opponents
        #update the fitness of each individual
        for i,opponent in enumerate(opponents):
            individual_map[opponent]["fitness"].append(fitnesses[i])

    #then save the results
    with open("individual_map.pkl","wb") as f:
        pickle.dump(individual_map,f)