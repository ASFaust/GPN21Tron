import socket
import numpy as np
import time
from Game import Game
from Controller import Controller
import cv2

class Tron:
    def __init__(self):
        self.host = 'gpn-tron.duckdns.org'
        self.port = 4000
        self.username = "Snek"
        self.password = "yousorandomxd"
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((self.host, self.port))
        print("connected.")
        #self.weights = (-0.030564719524807514, 1.0051631219522386, 0.39656536679234267, 0.6173943302186865, 0.15642170918508655, 0.9554791832045848)
        #self.weights = (0.8030745481505493, 0.33864959471144396, 0.49828087898209317, 0.08939906100425099, -0.14830573064071664, 1.2507451665305211)
        #self.weights = (-0.0270007979079513, 0.828252131131214, 0.5039031305967274, 0.16356345117206306, 0.15951748736838017, 0.8628544581024385)
        #self.weights = (0.4164104402724594, -1.598031090424554, 1.1369466382029623, 0.5755494295759612, 1.8202950397758597, 0.24797226230673527, 1.1689749764522475, 0.008797048841106202, 1.3975230969583319, 2.4932034181433993, -0.726365215769179, 0.9490725296440652, -1.097085982870446, 1.3352498579707341, -1.2564884986581775, -1.8460994658312992, 1.5601898238481937, 1.7244503664884265, -0.8461168282293606, 1.6394751337477707, 0.733636364061387, 0.29760812815104315, 0.5206680499345095, 1.6366222221847677, 0.22349988171880195, -0.7261340420529078, 0.0430319165307107, -0.5317302156882985, 1.6597463731379694, 1.5970932750353148, -0.567256080495172, -0.1190953679366266)
        #unrefined, 20 enemies, 90% rank extraction
        #self.weights = (1.2696243840377026, 0.6055145706204373, 1.0130858122691004, 1.559375689535413, -0.15367459899353111, 1.7450012265645825, -0.5612036217116675, 0.08467699944517816, 1.0089978415136458, 0.16188627525591673, 0.670236322287019, -1.1432665890881466, -1.4129363170741809, 0.032107318516881624, 1.1184858285117358, -0.25005527577490505, -1.6487081934934582, 2.2161050087872085, 0.23463881089735003, 1.3674315898817735, -0.2348790614453209, 1.0733707443673381, -0.11374000537577508, -0.6799906038686019, 1.934875659848384, -0.5340623583043264, -0.14275173563758442, 0.2029481352230752, -1.2889712964283326, 2.9051844069920034, 0.57137782269059, -0.3336242663822117)
        #unrefined, 20 enemies, 40% WR extraction
        #self.weights = (0.025131421289588837, -2.0252085207992936, 0.47412635727652436, 1.3244271288771734, 0.3288951131338792, 0.06407660380548652, 0.46890898521812313, 0.8377293462631007, -0.4294024896398693, -0.804529001748123, 1.7522699464987865, -1.6137352338504278, 1.070335960843388, 0.5838230589471456, -0.03661359523710329, -1.135834102667944, 3.133728710069223, 0.11431927265380575, -0.28299533368452334, -0.16654628346454106, -1.165402878231832, 0.40386632488309593, 1.1979528237365593, -0.32045924175408047, 0.7951672114651036, -0.7992719965335287, -0.7954771481003965, 0.7327545368512258, 0.4659730134627029, 0.0862441332447461, 0.091097848803046, -0.20169545516865234)
        #refined, 20 enemies, 60% rank extraction (better enemies -> lower overall rank) AND refined, 20 enemies, 16% WR extraction
        #self.weights = (-0.3431393401969582, -0.5889034691504542, -1.1369519236959587, -0.17927299786102405, 1.5528979312165567, -1.245398925665014, -0.11318421449768448, -0.01562874158943733, 2.096946990019249, -1.0288594850505104, -0.575128381914481, 2.837423929812102, -0.7111604224503522, 0.5307302096718722, 1.3768648193695092, -1.4620377979658359, -0.4201316351735732, -1.1960817213412278, -1.164943224451217, -0.2119668484733715, 0.9325578081319053, 1.1990175879447198, -0.26003366956819424, 0.1969109351500523, -0.032542660488523764, 0.4254293388801167, -0.2763772506851758, 0.122430025604848, 1.760091700385811, 0.3541240772493791, -0.5623299049160346, -0.7931294911453518)
        #unrefined, 8 neurons, rank extraction, 20 enemies, same as  win rate extraction
        #self.weights = (0.4762431752651239, 0.9055161105264022, -0.7790163023537177, 0.522438868292459, -0.26277688152484524, 0.9017825611815647, 0.030507334178462464, -1.0529234714299636, 0.23872935382502838, 1.6878815613543514, 1.6357643986302224, 1.0209395650811672, -1.7993930940113951, -1.1304898591387582, -1.0317896095293004, 1.4263219990299327, -1.8249232499565315, -0.9961391131193531, 0.0867351187101912, 0.2057769231865904, 0.7710262560608895, 1.3748488735030038, 1.590362007817909, 1.1962761637055197, -0.09179165408429617, 0.9033307404458015, 2.381289231089082, -1.9044965405353678, 1.1831341261804804, -1.497214715068207, 0.5630384187979826, -0.9887517924306016, -0.6545665595052572, -1.1996019178468207, 0.16965089859359572, 1.2616354373758032, -1.1923367522589352, -0.27629366506613334, 0.3465633158268876, -1.3518363743251522, -1.3871800734413244, -0.22399470833085217, 1.2755993095731153, 0.12540698066023206, -0.16194092236160262, 0.07297099305704652, -1.5357152013555493, 0.08004671878517487, 0.8229493399216417, -1.1700554051219045, -0.5812319635060124, 0.16337121045368358, -2.1686197242326486, -0.35101707782220526, -0.8252730262144278, -0.8591981714394626, 0.021115610231300517, -0.13325581317373728, 1.1264078488300104, 0.7040315872173712, 0.311835863043621, -1.4008664904896597, -0.5054775922973638, 0.8817712937399499)
        #lazy refined
        #self.weights = (0.25287136439194, 0.10889693697772013, -0.6879210318015857, 0.9966997049853121, -0.4940786574606453, 0.29110718512316713, 0.8511173775656916, -0.8979404191624302, 1.7606535803373082, 0.004214539709839246, 0.2292602472701635, 0.7273589303443992, -1.7110216316734408, 1.045442762458236, -0.5121110457254777, -0.8031457957828279, 0.23835447810233973, -1.4621592593645225, 0.6376766727742222, -2.3952391525411576, -0.23061914143466652, -1.7700970219615992, 0.08180078223960358, 0.49519005442047354, 0.9077005026709072, -0.48426318855768785, -0.24099528338515377, -0.68884517106631, 0.9523904238856137, 0.4096670840716811, -1.5298752498951005, -0.16803292206409123, -0.13399201688679255, 0.15417764139982812, 1.1382322919737153, 0.5903117049765381, -1.3622008557211434, 0.05371973074322246, -0.12905484382539006, -0.7276505287732605, 0.5278332374740489, -1.2631983423109423, 1.1493711382547995, -0.36225764071347244, -0.5856723154410463, -0.07627278858229977, -0.05164786639736221, -0.386561959304457, 0.4559113060494339, -1.7285741831792685, -0.4096176939860741, 2.350370481166916, -0.6086378210308582, 2.498573025903208, 0.003214852763421157, 0.06751538632057155, 2.487985465959731, -1.2057683067815335, 0.39533033158497166, -1.1270454977354067, 0.2788628582336948, 1.6721744678493249, 0.4297561340197505, 0.8864022032951338)
        #self.weights = (-0.018697139221882573, 0.4654519570092596, -0.6828687901340683, -0.7136968473101523, -0.5786090568637233, 0.7945697469739377, -0.15917040780480177, 1.3768872697073917, 0.07407138885683331, -0.35370401910532523, 0.7510952267483718, 1.1089599054746382, 0.5174760136225535, -0.9688038719905218, 0.5021325616086642, 1.1575418568912723, -0.6468209141538355, -2.1732197709350234, 1.3660984053180467, 1.1760384561233255, 0.1452713109619474, 2.0229773550747474, -0.47650325081038925, 2.083559617818196, 0.15751564967411252, -0.43369642731731545, -0.35660979072986215, -1.6624260170380984, 0.05802147922950364, -1.8459030664065883, 1.7120912016071077, -0.18719121934581512, -2.0848793587439696, 0.8615769711284231, -0.9027928214225727, -0.34703227927521685, 1.9035041483265667, 0.8605475287068499, -1.1356519796904774, 1.2749997075530655, -1.1824865607799422, -0.2961594688376481, -1.021920931698995, -0.3750150761284037, -0.45534074267895275, 1.6854250922632716, -1.9928066773106143, -1.5947823269485542, -0.28292959256156247, 0.39836630107975235, -2.6009351656973028, 0.7987258368503576, 1.8339841570726445, 0.5054326656753747, 0.5731522258512061, 1.0302932312922433, 1.0117723745676834, -0.22115448735460091, -2.7972373678145455, -0.9608591063116159, -0.7818645415215933, 0.3347723033441688, 0.05813983227663898, 1.4803268173761002, -0.974165939406189, -0.5439605827912369, 1.5927656548355755, 0.6336865472410671, -0.27393256610709016, 0.10115896399372157, 0.8317418883356014, -0.4582226219021836, -0.6168431151490166, -0.42919108020036795, -1.4966700069528762, 0.346478957451436, -0.19277983354744047, 0.3271124330938647, -0.24415792839431785, 1.0497537662312166, 0.7974298358857512, -0.36958035970683684, -1.0160941463050948, -0.23833001756853817, 1.0654608377601296, 1.2743534087334232, 0.028020694631650293, -2.409888569394166, -1.447444879687936, -1.1050533493210146, -1.9747217240112533, -0.36898352433036713, 1.3040308845259634, 0.8812295470447706, -0.3786561048154535, 0.6956447697478501)
        self.weights = (0.24468566325689595, 0.7001472121784112, -0.5801228998971122, 0.8942031185128997, -0.21556624222257534, -0.25222502908350136, 0.08203006360143061, 0.6763261612604616, -0.44824496973646244, 1.4313969551521009, 0.44448363680385106, 0.9408031371205129, 0.8146643991896771, -0.9277906469320377, -0.1979329625494955, -2.7899737024558684, -0.051641903636257265, 1.2969871077596256, 0.28586133185607393, -0.2632077330108636, -0.01229371167428893, -1.180337697057412, 0.03428204394099986, 1.2699503144553903, 1.0596592759051155, 0.6259569641374492, 0.8786906952281931, 1.552364088681799, 1.8867170266972273, -0.5863985498143399, -2.6346318788212573, -0.7502080604565021, 1.410041962929179, 0.5298857173644955, 1.0732927906161445, -0.31802200058600877, -0.48733803128191594, 1.6854143688721164, -0.8634089365842575, -0.8412910787430491, 0.7228803464224018, 0.39616581265771544, -0.1668008342642309, -0.19955487216306156, 0.4486711760206009, 0.08108678729503854, 2.447269542025438, -1.0140820201539646, -1.1322424475778583, 0.7260215609413789, 0.5384479631437052, 0.2659166060773644, 0.6377759588060169, -0.932338217783017, -0.5630320362304616, -0.8729400660842597, 0.958778226019332, 2.8415939026502723, 1.0437763927834434, -0.31135633538016116, 1.073395284149623, 0.9004591460972544, -1.0426208007771518, 1.9288736427056519, 0.03328638642461746, -0.9043252759311226, -1.1155741241275312, 0.7838481767960903, 0.9016247338812038, -0.5177135996169066, -1.111290537598721, 0.9041978958065824, -0.48109501051341874, 0.7627758123002528, 1.9002991084169718, 1.1796856158833757, -0.6610342720077905, 1.1005221512406944, -0.2178632984167551, -1.2888132370847343, 0.8943603276952254, -1.2625327229323902, 1.0084865603739241, 0.39509651523921474, 2.0023016792301616, -0.775009227046066, -0.2967064328900007, 0.63641798309807, 0.9135876173809665, 1.2186806442159581, -0.49790222381612753, 1.0003391108748951, 1.601957634115921, 0.6472801778758537, 1.1501562766838591, 1.3365938822107557)
        self.weights = np.array(self.weights)
        self.dead = True
        self.n_neurons = 8

    def recv(self):
        buffer = ""
        while True:
            while "\n" in buffer:
                # split the buffer at the first newline, yielding the first part
                line, buffer = buffer.split("\n", 1)
                # print(line)
                yield line.split("|")  # line
            # when no more newlines are in the buffer, read more data
            chunk = self.sock.recv(1024)
            if chunk == '':
                raise RuntimeError("socket connection broken")
            buffer += chunk.decode('utf-8')

    def join(self):
        self.send(f"join|{self.username}|{self.password}")

    def send(self, msg):
        print(msg)
        self.sock.sendall((msg + "\n").encode('utf-8'))

    def set_game(self, msg):
        #width, height and self player id
        width = int(msg[1])
        height = int(msg[2])
        self.player_id = int(msg[3])
        self.game = Game(width,height)
        self.controller = Controller()
        self.controller.init(self.game,self.player_id,self.weights, self.n_neurons)
        self.dead = False

    def update_pos(self, msg):
        player_id = int(msg[1])
        x = int(msg[2])
        y = int(msg[3])
        self.game.update_pos(player_id,x,y)

    def someone_died(self, msg):
        self.send("chat|womp womp")
        #we need to remove the player from the game
        player_ids = msg[1:]
        print("someone died. removing their trace.")
        for player_id in player_ids:
            self.game.board[self.game.board == int(player_id)] = -1
            del self.game.players[int(player_id)]

    def move(self):
        start_time = time.time()
        move = self.controller.move(as_string=True)
        end_time = time.time()
        #print(f"moving took {end_time - start_time} seconds.")
        self.send(f"move|{move}")  # send final move command

    def run(self):
        last_tick = time.time()
        tp.join()
        print("joined.")
        for msg in self.recv():
            if msg[0] == "error":
                print(msg)
            if msg[0] == "game":
                self.set_game(msg)
            if self.dead:
                #print("self is dead")
                continue
            # -------------------------------- handling of in-game stuff: -----------------------------
            if msg[0] == "pos":
                self.update_pos(msg)
            if msg[0] == "die":
                self.someone_died(msg)
            if msg[0] == "tick":
                next_tick = time.time()
                print(f"tick took {next_tick - last_tick} seconds.")
                last_tick = next_tick
                self.game.update_board()
                img = self.game.draw()
                cv2.imshow("game", img)
                cv2.waitKey(1)
                self.move()
            if msg[0] == "lose":
                print("i lost.")
                self.dead = True
            if msg[0] == "win":
                print("i WON :D")
                self.send("chat|my 4 hidden neurons are just too powerful")
                self.dead = True

tp = Tron()
tp.run()
